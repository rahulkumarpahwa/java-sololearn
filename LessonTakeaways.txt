Module 1:

Lesson 1 :

Lesson Takeaways

Awesome! You completed your first lesson ðŸš€. Remember the following important points:

ðŸ’¡ You can write code that generates outputs with the System.out.println() statement

ðŸ’¡ The println instruction needs to be followed by parentheses.

Lesson 2:

Lesson Takeaways

Great work ðŸŽ¯! You completed the lesson. You learned that:

ðŸ’¡ You can add multiple statements to your programs

ðŸ’¡ Text needs to be enclosed in quotes

ðŸ’¡ Java is a case-sensitive language.

In the next lesson, youâ€™ll learn about the structure of programs in Java.

Lesson 3:

Lesson Takeaways

Great job ðŸŽ¯! You now know how to create a valid Java program structure!

Remember the following important points:

ðŸ’¡ You need to start your program by creating a class.

ðŸ’¡ The class needs to include a main method, which is the starting point of the program.

ðŸ’¡ The main method includes the statements that need to be executed when the program runs.

ðŸ’¡ The class, as well as the main method opens and closes using opening and closing curly brackets.

Lesson 4:

Lesson Takeaways

Great job ðŸŽ¯! You now know how to create a valid Java program structure!

Remember the following important points:

ðŸ’¡ You need to start your program by creating a class.

ðŸ’¡ The class needs to include a main method, which is the starting point of the program.

ðŸ’¡ The main method includes the statements that need to be executed when the program runs.

ðŸ’¡ The class, as well as the main method opens and closes using opening and closing curly brackets.

Lesson 5 :

Lesson Takeaways 

Awesome! Here are some key takeaways:

 - A variable has a name and a type of the value it holds.

 - To declare a variable use the type followed by the name of the variable.

 - You can assign a value to the declared variable using the = operator.

 - A variable can change its value during the program, by being assigned to a new value.

Lesson 6 :

Lesson Takeaways 

Awesome! Here are some key takeaways:

 - A variable has a name and a type of the value it holds.

 - To declare a variable use the type followed by the name of the variable.

 - You can assign a value to the declared variable using the = operator.

 - A variable can change its value during the program, by being assigned to a new value.

Lesson 7 :
Lesson Takeaways  

Great job! Here are some key takeaways:

 - int holds integers (whole numbers).

 - double holds decimal numbers.

 - float is similar to double, but has less precision and requires less memory.

 - You need to use an f postfix after the value to make it a float (for example: 3.14f)

 - char holds a single character.

 - boolean can have one of the following values: true or false.

Lesson 8 :
Lesson Takeaways  

Great job! Here are some key takeaways:

 - int holds integers (whole numbers).

 - double holds decimal numbers.

 - float is similar to double, but has less precision and requires less memory.

 - You need to use an f postfix after the value to make it a float (for example: 3.14f)

 - char holds a single character.

 - boolean can have one of the following values: true or false.

Lesson 9:
Lesson Takeaways

Math is fun! Here are some key takeaways:

You can use basic math operators to perform calculations with values and variables.

+ is addition

- is subtraction

/ is division

% finds the remainder of a division.

You can add Strings using the + operator, in a process called concatenation.

Lesson 10 :

Lesson Takeaways

Math is fun! Here are some key takeaways:

You can use basic math operators to perform calculations with values and variables.

+ is addition

- is subtraction

/ is division

% finds the remainder of a division.

You can add Strings using the + operator, in a process called concatenation.

Lesson 11 :

Lesson Takeaways  

Now you know how to add comments to your code! Here are some key takeaways:

Comments are explanatory statements that explain what the code is doing.

They can contain notes, todos as well as code that is work-in-progress.

// starts a single line comment.

/* */ is used for multi-line comments.

Lesson 12 :
Lesson Takeaways  

Now you know how to add comments to your code! Here are some key takeaways:

Comments are explanatory statements that explain what the code is doing.

They can contain notes, todos as well as code that is work-in-progress.

// starts a single line comment.

/* */ is used for multi-line comments.

Module 1 Finished.

Module 2:
Lesson 1: 
Lesson Takeaways 

That's how you take input from the user in Java!

Here are the steps:

1. import the java.util.Scanner class.

2. create a Scanner object:
Scanner sc = new Scanner(System.in);

3. Use the corresponding method of the Scanner to take input, for example:
import java.util.Scanner;

class Demo {
    public static void main(String[ ] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println(num);        
    }
}

Lesson 2:

Lesson Takeaways 

That's how you take input from the user in Java!

Here are the steps:

1. import the java.util.Scanner class.

2. create a Scanner object:
Scanner sc = new Scanner(System.in);

3. Use the corresponding method of the Scanner to take input, for example:
import java.util.Scanner;

class Demo {
    public static void main(String[ ] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        System.out.println(num);        
    }
}

Lesson 3:
Lesson Takeaways

Now you know how to make decisions in your code! Here are some key takeaways:

You can check for a condition using the if statement.

In case the condition is false, the code in an else statement can be executed.

Here is a generic structure of if-else statements:

if(condition) {
  //some code
} else if(condition) {
//some other code
} else {
  //some other code
}

Lesson 4:
Lesson Takeaways

Now you know how to make decisions in your code! Here are some key takeaways:

You can check for a condition using the if statement.

In case the condition is false, the code in an else statement can be executed.

Here is a generic structure of if-else statements:

if(condition) {
  //some code
} else if(condition) {
//some other code
} else {
  //some other code
}

Lesson 5:
Translate course
Lesson Takeaways

The <b>switch </b>statement is a handy way to check for multiple values and run code.

- Remember, that each <b>case </b>is followed by a value and a colon.

- Each case needs a <b>break </b>statement, or the code of the other cases will continue to get executed.

 - The <b>default </b>case can be used to run code if none of the cases match.

In the next lesson, we will learn how to check for multiple conditions.

Lesson 6:

Lesson Takeaways

The <b>switch </b>statement is a handy way to check for multiple values and run code.

- Remember, that each <b>case </b>is followed by a value and a colon.

- Each case needs a <b>break </b>statement, or the code of the other cases will continue to get executed.

 - The <b>default </b>case can be used to run code if none of the cases match.

In the next lesson, we will learn how to check for multiple conditions.

Lesson 7:

Lesson Takeaways  

Logical operators allow to combine multiple conditions.

- The AND operator <b>&amp;&amp;</b> combines two conditions and checks if both of them are true.

- The OR operator <b>||</b> check if any of the conditions if true.

- The NOT operator <b>!</b> reverses the condition.

Next lesson will be fun! We will cover loops, which allow to repeat a block of code multiple times. 

Lesson 8:

Lesson Takeaways  

Logical operators allow to combine multiple conditions.

- The AND operator <b>&amp;&amp;</b> combines two conditions and checks if both of them are true.

- The OR operator <b>||</b> check if any of the conditions if true.

- The NOT operator <b>!</b> reverses the condition.

Next lesson will be fun! We will cover loops, which allow to repeat a block of code multiple times. 

Lesson 9:
Lesson Takeaways

Here is a summary about the <b>while </b>loop:

- The code in the <b>while </b>loop runs as long as the condition is true.

- The ++ and -- operators are used to increase and decrease the value of a variable by one.

- Java provides shorthand operators to perform mathematical operations on a variable, for example x = x * 9; can be written as x * = 9.

- The do-while loop is similar to a <b>while </b>loop, but it is guaranteed to run at least once.

We will learn about another loop type in the next lesson!

Lesson 10:

Lesson Takeaways

Here is a summary about the <b>while </b>loop:

- The code in the <b>while </b>loop runs as long as the condition is true.

- The ++ and -- operators are used to increase and decrease the value of a variable by one.

- Java provides shorthand operators to perform mathematical operations on a variable, for example x = x * 9; can be written as x * = 9.

- The do-while loop is similar to a <b>while </b>loop, but it is guaranteed to run at least once.

We will learn about another loop type in the next lesson!

Lesson 11:

Lesson Takeaways

Great progress! Here is a summary:

 - The for loop has the following syntax:
 
 for(init; condition; increment) {
   //code
}

- The break statement can be used to stop a loop.

- The continue statement can be used to skip the current iteration of the loop and jump to the next one.

Lesson 12:
Lesson Takeaways

Great progress! Here is a summary:

 - The for loop has the following syntax:

 for(init; condition; increment) {
   //code
}

- The break statement can be used to stop a loop.

- The continue statement can be used to skip the current iteration of the loop and jump to the next one.

Module 2 Finished.

Module 3:

Lesson 1:

Lesson Takeaways

Awesome! Here are some key points about arrays:

Arrays allow you to store multiple values in a variable.

When creating an array, we need to provide the type of the items and the size of the array, like this:

int[] nums = new int[4];

Array items are accessed using their indexes, placed in square brackets. The first item has the index 0.

You can also create an array with values using the following syntax:

int[] nums = {4, 6, 2, 1};

In the next lesson we will learn how to loop over the values of an array and make calculations.

Lesson 2 :

Lesson Takeaways

Awesome! Here are some key points about arrays:

Arrays allow you to store multiple values in a variable.

When creating an array, we need to provide the type of the items and the size of the array, like this:

int[] nums = new int[4];

Array items are accessed using their indexes, placed in square brackets. The first item has the index 0.

You can also create an array with values using the following syntax:

int[] nums = {4, 6, 2, 1};

In the next lesson we will learn how to loop over the values of an array and make calculations.

Lesson 3:
Lesson Takeaways

Looping over arrays is fun!

You can use a <b>for </b>loop to loop over an array.

The <b>length </b>property is used to get the number of items of the array.

for(int x=0;x<arr.length; x++) {
//current item is arr[x]
}

Another way to loop over arrays is the for-each loop:

for(int x: arr) {
// current item is x
}

We will learn about multidimensional arrays in the next lesson!

Lesson 4:

Lesson Takeaways

Looping over arrays is fun!

You can use a <b>for </b>loop to loop over an array.

The <b>length </b>property is used to get the number of items of the array.

for(int x=0;x<arr.length; x++) {
//current item is arr[x]
}

Another way to loop over arrays is the for-each loop:

for(int x: arr) {
// current item is x
}

We will learn about multidimensional arrays in the next lesson!

Lesson 5:
Lesson Takeaways 

Arrays with multiple dimensions are simply arrays that contain other arrays.

The number of square brackets match the dimension of the array, for example [][] denotes a 2-dimensional array.

To access the items of the array, specify the row index in the first square brackets, followed by the column index in the second.

Lesson 6:

Lesson Takeaways 

Arrays with multiple dimensions are simply arrays that contain other arrays.

The number of square brackets match the dimension of the array, for example [][] denotes a 2-dimensional array.

To access the items of the array, specify the row index in the first square brackets, followed by the column index in the second.

Module 3 Finished.

Module 4:
Lesson 1:
Lesson Takeaways

Great job! Here are the main points to remember when defining your own methods:

 - Methods are reusable, we define them once and can call them multiple times.

 - To call a method, use its name, followed by parentheses.

 - The <b>void </b>keyword means that the method does not return a value.

We will learn about return values in the next lessons, so stay tuned!

Lesson 2:
Lesson Takeaways

Great job! Here are the main points to remember when defining your own methods:

 - Methods are reusable, we define them once and can call them multiple times.

 - To call a method, use its name, followed by parentheses.

 - The <b>void </b>keyword means that the method does not return a value.

We will learn about return values in the next lessons, so stay tuned!

Lesson 3:
Lesson Takeaways

Method parameters are awesome!

Here is a summary:

 - You can define parameters in the parentheses.

 - Multiple parameters need to be separated by commas.

 - The parameters are available in the method, like variables of the given names.

 - When calling a method, you need to provide its parameters in the same order, as defined.

You will learn how to return values in the next lesson.

Lesson 4:

Lesson Takeaways

Method parameters are awesome!

Here is a summary:

 - You can define parameters in the parentheses.

 - Multiple parameters need to be separated by commas.

 - The parameters are available in the method, like variables of the given names.

 - When calling a method, you need to provide its parameters in the same order, as defined.

You will learn how to return values in the next lesson.

Lesson 5:

Lesson Takeaways

You did it! This was the last lesson of this course.

Here is a quick recap for returning from methods:

 - Use the <b>return</b> statement to return a value from your method.

 - The method needs to have its return type specified before its name.

 -  The returned value can be assigned to a variable when calling the method.

Lesson 6:
Lesson Takeaways

You did it! This was the last lesson of this course.

Here is a quick recap for returning from methods:

 - Use the <b>return</b> statement to return a value from your method.

 - The method needs to have its return type specified before its name.

 -  The returned value can be assigned to a variable when calling the method.